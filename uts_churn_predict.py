# -*- coding: utf-8 -*-
"""UTS_Churn_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bs53inp9KJ0D_V038hOlEDoyK-0MRK0-
"""

!pip install streamlit

import streamlit as st
import joblib
import numpy as np
import pandas as pd


model = joblib.load('RF_churn.pkl')
gender_encode= joblib.load('gender_encoded.pkl')
oneHot_encode_subs=joblib.load('OHC_encoded_subs.pkl')
oneHot_encode_cont=joblib.load('OHC_encoded_cont.pkl')


def main():
    st.title('Churn Model Deployment')


    credit_score = st.number_input("total Credit score", 0,1000000000)
    geography = st.radio("choose subscription type", ["Germany","Spain","France"])
    gender = st.radio("gender", ["Male","Female"])
    age = st.number_input("age", 0, 100)
    tenure = st.number_input("the period of time tenure (in years)", 0,100)
    balance = st.number_input("total Balance", 0,1000000000)
    numofproducts = st.number_input("total products", 0,1000)
    hascrcard = st.radio("Have CR Crad",["Yes","No"])
    activemember = st.radio("Have CR Crad",["Yes","No"])
    estimatedsalary = st.number_input("estimated salary", 0,1000000000)

    data = {'Credit Score' :float(credit_score), 'Geography': geography , 'Gender': gender, 'Age': int(age),
            'Tenure':int(tenure),'Balance': float(balance), 'NumOfProducts':int(numofproducts),'CrCard':hascrcard,
            'Active member': activemember,'Estimated Salary':float(estimatedsalary)}


    df=pd.DataFrame([list(data.values())], columns=['Credit Score','Geography', 'Gender', 'Age',
            'Tenure','Balance','NumOfProducts','CrCard','Active member','Estimated Salary'])

    df=df.replace(gender_encode)
    cat_subs=df[['Geography']]
    cat_cont=df[['Geography']]
    cat_enc_subs=pd.DataFrame(oneHot_encode_subs.transform(cat_subs).toarray(),columns=oneHot_encode_subs.get_feature_names_out())
    cat_enc_cont=pd.DataFrame(oneHot_encode_cont.transform(cat_cont).toarray(),columns=oneHot_encode_cont.get_feature_names_out())
    df=pd.concat([df,cat_enc_subs,cat_enc_cont], axis=1)
    df=df.drop(['Geography'],axis=1)

    if st.button('Make Prediction'):
        features=df
        result = make_prediction(features)
        st.success(f'The prediction is: {result}')

def make_prediction(features):
    input_array = np.array(features).reshape(1, -1)
    prediction = model.predict(input_array)
    return prediction[0]

if __name__ == '__main__':
    main()